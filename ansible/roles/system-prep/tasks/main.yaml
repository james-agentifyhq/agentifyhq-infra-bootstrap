---
# System preparation tasks
# Prepares the system for K3s installation by updating packages and installing dependencies

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
  become: true
  when: ansible_os_family == "Debian"
  tags:
    - system-prep
    - packages

- name: Upgrade all packages
  ansible.builtin.apt:
    upgrade: dist
    autoremove: yes
    autoclean: yes
  become: true
  when: ansible_os_family == "Debian"
  tags:
    - system-prep
    - packages

- name: Install required system packages
  ansible.builtin.apt:
    name: "{{ system_packages }}"
    state: present
    update_cache: yes
  become: true
  when: ansible_os_family == "Debian"
  tags:
    - system-prep
    - packages

- name: Install Python packages via pip
  ansible.builtin.pip:
    name: "{{ python_packages }}"
    state: present
    extra_args: --break-system-packages
  become: true
  tags:
    - system-prep
    - python

- name: Install Python packages via pip
  ansible.builtin.pip:
    name: "{{ python_packages }}"
    state: present
    extra_args: --break-system-packages
  become: true
  tags:
    - system-prep
    - python

- name: Install kubeseal CLI
  block:
    - name: Check if kubeseal is already installed
      ansible.builtin.stat:
        path: /usr/local/bin/kubeseal
      register: kubeseal_binary

    - name: Download kubeseal
      ansible.builtin.get_url:
        url: https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.5/kubeseal-0.24.5-linux-amd64.tar.gz
        dest: /tmp/kubeseal.tar.gz
        mode: '0644'
      when: not kubeseal_binary.stat.exists

    - name: Create temporary directory for kubeseal extraction
      ansible.builtin.tempfile:
        state: directory
        suffix: kubeseal
      register: kubeseal_temp_dir
      when: not kubeseal_binary.stat.exists

    - name: Extract kubeseal
      ansible.builtin.unarchive:
        src: /tmp/kubeseal.tar.gz
        dest: "{{ kubeseal_temp_dir.path }}"
        remote_src: yes
      when: not kubeseal_binary.stat.exists

    - name: Install kubeseal binary
      ansible.builtin.copy:
        src: "{{ kubeseal_temp_dir.path }}/kubeseal"
        dest: /usr/local/bin/kubeseal
        mode: '0755'
        remote_src: yes
      become: true
      when: not kubeseal_binary.stat.exists

    - name: Clean up kubeseal temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/kubeseal.tar.gz
        - "{{ kubeseal_temp_dir.path }}"
      when: not kubeseal_binary.stat.exists
  tags:
    - system-prep
    - kubeseal

- name: Set timezone
  community.general.timezone:
    name: "{{ system_timezone }}"
  become: true
  tags:
    - system-prep
    - timezone

- name: Check if swap is enabled
  ansible.builtin.command: swapon -s
  register: swap_status
  changed_when: false
  failed_when: false
  tags:
    - system-prep
    - swap

- name: Disable swap for current session
  ansible.builtin.command: swapoff -a
  become: true
  when:
    - disable_swap | bool
    - swap_status.stdout != ""
  tags:
    - system-prep
    - swap

- name: Disable swap permanently in /etc/fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  become: true
  when: disable_swap | bool
  tags:
    - system-prep
    - swap

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  become: true
  tags:
    - system-prep
    - networking

- name: Enable bridge netfilter
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  become: true
  tags:
    - system-prep
    - networking

- name: Load br_netfilter kernel module
  community.general.modprobe:
    name: br_netfilter
    state: present
  become: true
  tags:
    - system-prep
    - networking

- name: Ensure br_netfilter loads on boot
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'br_netfilter'
    create: yes
  become: true
  tags:
    - system-prep
    - networking

- name: Configure UFW firewall
  block:
    - name: Allow required ports through firewall
      community.general.ufw:
        rule: allow
        port: "{{ item.split('/')[0] }}"
        proto: "{{ item.split('/')[1] }}"
      become: true
      loop: "{{ firewall_allowed_ports }}"
      when: enable_firewall | bool

    - name: Enable UFW
      community.general.ufw:
        state: enabled
      become: true
      when: enable_firewall | bool
  tags:
    - system-prep
    - firewall

- name: Create backup directory for K3s
  ansible.builtin.file:
    path: "{{ k3s_backup_dir }}"
    state: directory
    mode: '0755'
  become: true
  when: k3s_backup_enabled | bool
  tags:
    - system-prep
    - backup

- name: Check system requirements
  ansible.builtin.assert:
    that:
      - ansible_memtotal_mb >= 1024
      - ansible_processor_vcpus >= 1
    fail_msg: "System does not meet minimum requirements (1GB RAM, 1 vCPU)"
    success_msg: "System meets minimum requirements"
  tags:
    - system-prep
    - validation

- name: Display system information
  ansible.builtin.debug:
    msg:
      - "Hostname: {{ ansible_hostname }}"
      - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      - "Kernel: {{ ansible_kernel }}"
      - "Architecture: {{ ansible_architecture }}"
      - "Total Memory: {{ ansible_memtotal_mb }}MB"
      - "vCPUs: {{ ansible_processor_vcpus }}"
      - "IP Address: {{ ansible_default_ipv4.address }}"
  tags:
    - system-prep
    - info